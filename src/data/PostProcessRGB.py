'''
This program ensures that the rgb values of the images generated by PrepareData_RGB.py
sum up to 1. The rgb values are only 1 or 0, the alpha mask for the png file is removed
'''

# 1. Import libaries

from os import listdir
from os.path import isfile, join
from PIL import Image
# import torchvision.transforms.functional as TF
from torchvision.utils import make_grid, save_image
import torch
import torchvision.transforms.functional as TF

import sys
sys.path.append('../utils/')
from utils import postprocess_rgb

# 2. Get png files
imgFld = '../../../cadastralExportRGB/cadastralRGB/'
onlyfiles = [imgFld+f for f in listdir(imgFld) if isfile(join(imgFld, f))]
print(f'Processing {len(onlyfiles)} files')

# 3. test one single file
# 
# print(f'opening file path {onlyfiles[0]}')
# x = Image.open(onlyfiles[0])
# x = TF.to_tensor(x)
# x = x[:3] # removing alpha channel
# x = postprocess_rgb(x) # performing the threshold operation
# x = x.permute(2, 0, 1) # channel, x, y
# save_image(x, onlyfiles[0]+'test.png') # overwriting the file

# 4. Process files
for path in onlyfiles:
    print(f'opening file path {path}')
    x = Image.open(path)
    x = TF.to_tensor(x)
    x = x[:3] # removing alpha channel
    x = postprocess_rgb(x) # performing the threshold operation
    x = x.permute(2, 0, 1) # channel, x, y
    save_image(x, path) # overwriting the file
